Title : Create, Update and Delete (CRUD) with model forms

(Now we created order_form.html file then we created forms.py)

1 - What is model meta?
    Model Meta is basically the inner class of your model class. It is basically used to change the behavior of your model fields. Itâ€™s completely optional to add a Meta class to your model.

2 - How does the model meta use in our model?
    We add meta class in our model to add model meta:
    class className(models.Model):
        class Meta:
            options...

3 - What are the different meta options?
    Some of the options of meta class are as follow:
    abstract:
        If abstract = True, model will be an abstract base class
    
    app_label:
    If a model is defined outside of applications in INSTALLED_APPS, it must declare which app it belongs to:

    verbose_name:
        verbose_name is basically a human-readable name for your model

    ordering:
        Ordering is basically used to change the order of your model fields.

    For more options you can refer the following link:
    https://www.geeksforgeeks.org/meta-class-in-models-django/

4 - Why do we use fields = '__all__' in form.py file?
    This is saying that go ahead and create a form with all of the fields present in that table. 
    If you want to spcify some of the fields of a model then use list
    e.g:
    fields = ['field1','field2']

5 - What does redirect do?
    It is used to redirect from one page to another page.

6 - How to perform create operation?
    in views.py file we will create a function for creating new object(row in table).
    Then we will create a class for form and we will inherit it from ModelForm class of django.forms
    It will be easy for us to make the class in another file (forms.py)
    e.g:
    forms.py file:
    from django.forms import ModelForm
    from .models import Order
    class OrderForm(ModelForm):
        class Meta:
            model  = Order
            (Note: we are targetting Order model)
            fields = '__all__'
            (Note: form will contains all the fields present in the model.)

    In views.py file:
    def createOrder(request):
        form = OrderForm()
        context = {
            'form':form
        }

        if request.method == 'POST':
            form = OrderForm(request.POST)
            (Note: request.POST contains data filled by user.)
            if form.is_valid():
                form.save()
                return redirect('/')
                # redirecting to the main page

        return render(request,'accounts/order_form.html',context)

7 - How does to perform Update operation?
    You can create a function in views.py file for update any object values.
    In views.py file:
    def updateOrder(request,pk):
        order = Order.objects.get(id=pk)
        form = OrderForm(instance=order)
        context = {
            'form':form
        }

        if request.method == 'POST':
            form = OrderForm(request.POST, instance=order)
            if form.is_valid():
                form.save()
                return redirect('/')
    
        return render(request,'accounts/order_form.html',context)

8 - How does to perform delete operation?
    We can create a function in  views.py file.

    def deleteOrder(request, pk):
        order = Order.objects.get(id=pk)
        if request.method == 'POST':
            order.delete()
            return redirect('/')
        context = {
        }
        return render(request, 'accounts/delete.html',context) 